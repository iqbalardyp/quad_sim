// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mw.internal.robotics.gazebotransport.TestMsgs.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mw.internal.robotics.gazebotransport.TestMsgs.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace mw {
namespace internal {
namespace robotics {
namespace gazebotransport {

namespace {

const ::google::protobuf::Descriptor* TestScalars_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TestScalars_reflection_ = NULL;
const ::google::protobuf::Descriptor* TestArrays_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TestArrays_reflection_ = NULL;
const ::google::protobuf::Descriptor* TestNestedMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TestNestedMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* TestMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TestMessage_reflection_ = NULL;
struct TestMessageOneofInstance {
  const ::mw::internal::robotics::gazebotransport::TestScalars* test_scalar_;
  const ::mw::internal::robotics::gazebotransport::TestArrays* test_array_;
  const ::mw::internal::robotics::gazebotransport::TestNestedMessage* test_nested_message_;
}* TestMessage_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* TestPose_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TestPose_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TestEnum_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_mw_2einternal_2erobotics_2egazebotransport_2eTestMsgs_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_mw_2einternal_2erobotics_2egazebotransport_2eTestMsgs_2eproto() {
  protobuf_AddDesc_mw_2einternal_2erobotics_2egazebotransport_2eTestMsgs_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "mw.internal.robotics.gazebotransport.TestMsgs.proto");
  GOOGLE_CHECK(file != NULL);
  TestScalars_descriptor_ = file->message_type(0);
  static const int TestScalars_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestScalars, integer_64_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestScalars, unsigned_integer_64_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestScalars, integer_32_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestScalars, unsigned_integer_32_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestScalars, binary_64_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestScalars, binary_32_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestScalars, byte_array_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestScalars, character_array_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestScalars, enum_item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestScalars, logical_item_),
  };
  TestScalars_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TestScalars_descriptor_,
      TestScalars::default_instance_,
      TestScalars_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestScalars, _has_bits_[0]),
      -1,
      -1,
      sizeof(TestScalars),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestScalars, _internal_metadata_),
      -1);
  TestArrays_descriptor_ = file->message_type(1);
  static const int TestArrays_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestArrays, integer_64_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestArrays, unsigned_integer_64_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestArrays, integer_32_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestArrays, unsigned_integer_32_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestArrays, binary_64_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestArrays, binary_32_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestArrays, byte_array_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestArrays, character_array_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestArrays, enum_item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestArrays, logical_item_),
  };
  TestArrays_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TestArrays_descriptor_,
      TestArrays::default_instance_,
      TestArrays_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestArrays, _has_bits_[0]),
      -1,
      -1,
      sizeof(TestArrays),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestArrays, _internal_metadata_),
      -1);
  TestNestedMessage_descriptor_ = file->message_type(2);
  static const int TestNestedMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestNestedMessage, scalar_nested_message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestNestedMessage, array_nested_message_),
  };
  TestNestedMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TestNestedMessage_descriptor_,
      TestNestedMessage::default_instance_,
      TestNestedMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestNestedMessage, _has_bits_[0]),
      -1,
      -1,
      sizeof(TestNestedMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestNestedMessage, _internal_metadata_),
      -1);
  TestMessage_descriptor_ = file->message_type(3);
  static const int TestMessage_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessage, header_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TestMessage_default_oneof_instance_, test_scalar_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TestMessage_default_oneof_instance_, test_array_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TestMessage_default_oneof_instance_, test_nested_message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessage, payload_),
  };
  TestMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TestMessage_descriptor_,
      TestMessage::default_instance_,
      TestMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessage, _has_bits_[0]),
      -1,
      -1,
      TestMessage_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessage, _oneof_case_[0]),
      sizeof(TestMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessage, _internal_metadata_),
      -1);
  TestPose_descriptor_ = file->message_type(4);
  static const int TestPose_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestPose, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestPose, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestPose, z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestPose, w_),
  };
  TestPose_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TestPose_descriptor_,
      TestPose::default_instance_,
      TestPose_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestPose, _has_bits_[0]),
      -1,
      -1,
      sizeof(TestPose),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestPose, _internal_metadata_),
      -1);
  TestEnum_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_mw_2einternal_2erobotics_2egazebotransport_2eTestMsgs_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TestScalars_descriptor_, &TestScalars::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TestArrays_descriptor_, &TestArrays::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TestNestedMessage_descriptor_, &TestNestedMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TestMessage_descriptor_, &TestMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TestPose_descriptor_, &TestPose::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_mw_2einternal_2erobotics_2egazebotransport_2eTestMsgs_2eproto() {
  delete TestScalars::default_instance_;
  delete TestScalars_reflection_;
  delete TestArrays::default_instance_;
  delete TestArrays_reflection_;
  delete TestNestedMessage::default_instance_;
  delete TestNestedMessage_reflection_;
  delete TestMessage::default_instance_;
  delete TestMessage_default_oneof_instance_;
  delete TestMessage_reflection_;
  delete TestPose::default_instance_;
  delete TestPose_reflection_;
}

void protobuf_AddDesc_mw_2einternal_2erobotics_2egazebotransport_2eTestMsgs_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_mw_2einternal_2erobotics_2egazebotransport_2eTestMsgs_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n3mw.internal.robotics.gazebotransport.T"
    "estMsgs.proto\022$mw.internal.robotics.gaze"
    "botransport\"\233\002\n\013TestScalars\022\022\n\ninteger_6"
    "4\030\001 \002(\003\022\033\n\023unsigned_integer_64\030\002 \002(\004\022\022\n\n"
    "integer_32\030\003 \002(\005\022\033\n\023unsigned_integer_32\030"
    "\004 \002(\r\022\021\n\tbinary_64\030\005 \002(\001\022\021\n\tbinary_32\030\006 "
    "\002(\002\022\022\n\nbyte_array\030\007 \002(\014\022\027\n\017character_arr"
    "ay\030\010 \002(\t\022A\n\tenum_item\030\t \002(\0162..mw.interna"
    "l.robotics.gazebotransport.TestEnum\022\024\n\014l"
    "ogical_item\030\n \002(\010\"\232\002\n\nTestArrays\022\022\n\ninte"
    "ger_64\030\001 \003(\003\022\033\n\023unsigned_integer_64\030\002 \003("
    "\004\022\022\n\ninteger_32\030\003 \003(\005\022\033\n\023unsigned_intege"
    "r_32\030\004 \003(\r\022\021\n\tbinary_64\030\005 \003(\001\022\021\n\tbinary_"
    "32\030\006 \003(\002\022\022\n\nbyte_array\030\007 \003(\014\022\027\n\017characte"
    "r_array\030\010 \003(\t\022A\n\tenum_item\030\t \003(\0162..mw.in"
    "ternal.robotics.gazebotransport.TestEnum"
    "\022\024\n\014logical_item\030\n \003(\010\"\266\001\n\021TestNestedMes"
    "sage\022P\n\025scalar_nested_message\030\001 \002(\01321.mw"
    ".internal.robotics.gazebotransport.TestS"
    "calars\022O\n\024array_nested_message\030\002 \003(\01321.m"
    "w.internal.robotics.gazebotransport.Test"
    "Scalars\"\222\002\n\013TestMessage\022\016\n\006header\030\001 \002(\001\022"
    "H\n\013test_scalar\030\002 \001(\01321.mw.internal.robot"
    "ics.gazebotransport.TestScalarsH\000\022F\n\ntes"
    "t_array\030\003 \001(\01320.mw.internal.robotics.gaz"
    "ebotransport.TestArraysH\000\022V\n\023test_nested"
    "_message\030\004 \001(\01327.mw.internal.robotics.ga"
    "zebotransport.TestNestedMessageH\000B\t\n\007pay"
    "load\"6\n\010TestPose\022\t\n\001x\030\001 \002(\001\022\t\n\001y\030\002 \002(\001\022\t"
    "\n\001z\030\003 \002(\001\022\t\n\001w\030\004 \002(\001*\"\n\010TestEnum\022\n\n\006ITEM"
    "_A\020\000\022\n\n\006ITEM_B\020\001", 1216);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mw.internal.robotics.gazebotransport.TestMsgs.proto", &protobuf_RegisterTypes);
  TestScalars::default_instance_ = new TestScalars();
  TestArrays::default_instance_ = new TestArrays();
  TestNestedMessage::default_instance_ = new TestNestedMessage();
  TestMessage::default_instance_ = new TestMessage();
  TestMessage_default_oneof_instance_ = new TestMessageOneofInstance();
  TestPose::default_instance_ = new TestPose();
  TestScalars::default_instance_->InitAsDefaultInstance();
  TestArrays::default_instance_->InitAsDefaultInstance();
  TestNestedMessage::default_instance_->InitAsDefaultInstance();
  TestMessage::default_instance_->InitAsDefaultInstance();
  TestPose::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_mw_2einternal_2erobotics_2egazebotransport_2eTestMsgs_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_mw_2einternal_2erobotics_2egazebotransport_2eTestMsgs_2eproto {
  StaticDescriptorInitializer_mw_2einternal_2erobotics_2egazebotransport_2eTestMsgs_2eproto() {
    protobuf_AddDesc_mw_2einternal_2erobotics_2egazebotransport_2eTestMsgs_2eproto();
  }
} static_descriptor_initializer_mw_2einternal_2erobotics_2egazebotransport_2eTestMsgs_2eproto_;
const ::google::protobuf::EnumDescriptor* TestEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TestEnum_descriptor_;
}
bool TestEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TestScalars::kInteger64FieldNumber;
const int TestScalars::kUnsignedInteger64FieldNumber;
const int TestScalars::kInteger32FieldNumber;
const int TestScalars::kUnsignedInteger32FieldNumber;
const int TestScalars::kBinary64FieldNumber;
const int TestScalars::kBinary32FieldNumber;
const int TestScalars::kByteArrayFieldNumber;
const int TestScalars::kCharacterArrayFieldNumber;
const int TestScalars::kEnumItemFieldNumber;
const int TestScalars::kLogicalItemFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TestScalars::TestScalars()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mw.internal.robotics.gazebotransport.TestScalars)
}

void TestScalars::InitAsDefaultInstance() {
}

TestScalars::TestScalars(const TestScalars& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mw.internal.robotics.gazebotransport.TestScalars)
}

void TestScalars::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  integer_64_ = GOOGLE_LONGLONG(0);
  unsigned_integer_64_ = GOOGLE_ULONGLONG(0);
  integer_32_ = 0;
  unsigned_integer_32_ = 0u;
  binary_64_ = 0;
  binary_32_ = 0;
  byte_array_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  character_array_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  enum_item_ = 0;
  logical_item_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TestScalars::~TestScalars() {
  // @@protoc_insertion_point(destructor:mw.internal.robotics.gazebotransport.TestScalars)
  SharedDtor();
}

void TestScalars::SharedDtor() {
  byte_array_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  character_array_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void TestScalars::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TestScalars::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TestScalars_descriptor_;
}

const TestScalars& TestScalars::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mw_2einternal_2erobotics_2egazebotransport_2eTestMsgs_2eproto();
  return *default_instance_;
}

TestScalars* TestScalars::default_instance_ = NULL;

TestScalars* TestScalars::New(::google::protobuf::Arena* arena) const {
  TestScalars* n = new TestScalars;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TestScalars::Clear() {
// @@protoc_insertion_point(message_clear_start:mw.internal.robotics.gazebotransport.TestScalars)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TestScalars, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TestScalars*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(integer_64_, binary_64_);
    binary_32_ = 0;
    if (has_byte_array()) {
      byte_array_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_character_array()) {
      character_array_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[8 / 32] & 768u) {
    enum_item_ = 0;
    logical_item_ = false;
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TestScalars::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mw.internal.robotics.gazebotransport.TestScalars)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 integer_64 = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &integer_64_)));
          set_has_integer_64();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_unsigned_integer_64;
        break;
      }

      // required uint64 unsigned_integer_64 = 2;
      case 2: {
        if (tag == 16) {
         parse_unsigned_integer_64:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &unsigned_integer_64_)));
          set_has_unsigned_integer_64();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_integer_32;
        break;
      }

      // required int32 integer_32 = 3;
      case 3: {
        if (tag == 24) {
         parse_integer_32:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &integer_32_)));
          set_has_integer_32();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_unsigned_integer_32;
        break;
      }

      // required uint32 unsigned_integer_32 = 4;
      case 4: {
        if (tag == 32) {
         parse_unsigned_integer_32:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unsigned_integer_32_)));
          set_has_unsigned_integer_32();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_binary_64;
        break;
      }

      // required double binary_64 = 5;
      case 5: {
        if (tag == 41) {
         parse_binary_64:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &binary_64_)));
          set_has_binary_64();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_binary_32;
        break;
      }

      // required float binary_32 = 6;
      case 6: {
        if (tag == 53) {
         parse_binary_32:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &binary_32_)));
          set_has_binary_32();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_byte_array;
        break;
      }

      // required bytes byte_array = 7;
      case 7: {
        if (tag == 58) {
         parse_byte_array:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_byte_array()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_character_array;
        break;
      }

      // required string character_array = 8;
      case 8: {
        if (tag == 66) {
         parse_character_array:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_character_array()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->character_array().data(), this->character_array().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mw.internal.robotics.gazebotransport.TestScalars.character_array");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_enum_item;
        break;
      }

      // required .mw.internal.robotics.gazebotransport.TestEnum enum_item = 9;
      case 9: {
        if (tag == 72) {
         parse_enum_item:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mw::internal::robotics::gazebotransport::TestEnum_IsValid(value)) {
            set_enum_item(static_cast< ::mw::internal::robotics::gazebotransport::TestEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(9, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_logical_item;
        break;
      }

      // required bool logical_item = 10;
      case 10: {
        if (tag == 80) {
         parse_logical_item:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &logical_item_)));
          set_has_logical_item();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mw.internal.robotics.gazebotransport.TestScalars)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mw.internal.robotics.gazebotransport.TestScalars)
  return false;
#undef DO_
}

void TestScalars::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mw.internal.robotics.gazebotransport.TestScalars)
  // required int64 integer_64 = 1;
  if (has_integer_64()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->integer_64(), output);
  }

  // required uint64 unsigned_integer_64 = 2;
  if (has_unsigned_integer_64()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->unsigned_integer_64(), output);
  }

  // required int32 integer_32 = 3;
  if (has_integer_32()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->integer_32(), output);
  }

  // required uint32 unsigned_integer_32 = 4;
  if (has_unsigned_integer_32()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->unsigned_integer_32(), output);
  }

  // required double binary_64 = 5;
  if (has_binary_64()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->binary_64(), output);
  }

  // required float binary_32 = 6;
  if (has_binary_32()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->binary_32(), output);
  }

  // required bytes byte_array = 7;
  if (has_byte_array()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->byte_array(), output);
  }

  // required string character_array = 8;
  if (has_character_array()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->character_array().data(), this->character_array().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mw.internal.robotics.gazebotransport.TestScalars.character_array");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->character_array(), output);
  }

  // required .mw.internal.robotics.gazebotransport.TestEnum enum_item = 9;
  if (has_enum_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->enum_item(), output);
  }

  // required bool logical_item = 10;
  if (has_logical_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->logical_item(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mw.internal.robotics.gazebotransport.TestScalars)
}

::google::protobuf::uint8* TestScalars::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mw.internal.robotics.gazebotransport.TestScalars)
  // required int64 integer_64 = 1;
  if (has_integer_64()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->integer_64(), target);
  }

  // required uint64 unsigned_integer_64 = 2;
  if (has_unsigned_integer_64()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->unsigned_integer_64(), target);
  }

  // required int32 integer_32 = 3;
  if (has_integer_32()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->integer_32(), target);
  }

  // required uint32 unsigned_integer_32 = 4;
  if (has_unsigned_integer_32()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->unsigned_integer_32(), target);
  }

  // required double binary_64 = 5;
  if (has_binary_64()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->binary_64(), target);
  }

  // required float binary_32 = 6;
  if (has_binary_32()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->binary_32(), target);
  }

  // required bytes byte_array = 7;
  if (has_byte_array()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->byte_array(), target);
  }

  // required string character_array = 8;
  if (has_character_array()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->character_array().data(), this->character_array().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mw.internal.robotics.gazebotransport.TestScalars.character_array");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->character_array(), target);
  }

  // required .mw.internal.robotics.gazebotransport.TestEnum enum_item = 9;
  if (has_enum_item()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->enum_item(), target);
  }

  // required bool logical_item = 10;
  if (has_logical_item()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->logical_item(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mw.internal.robotics.gazebotransport.TestScalars)
  return target;
}

int TestScalars::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:mw.internal.robotics.gazebotransport.TestScalars)
  int total_size = 0;

  if (has_integer_64()) {
    // required int64 integer_64 = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->integer_64());
  }

  if (has_unsigned_integer_64()) {
    // required uint64 unsigned_integer_64 = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->unsigned_integer_64());
  }

  if (has_integer_32()) {
    // required int32 integer_32 = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->integer_32());
  }

  if (has_unsigned_integer_32()) {
    // required uint32 unsigned_integer_32 = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->unsigned_integer_32());
  }

  if (has_binary_64()) {
    // required double binary_64 = 5;
    total_size += 1 + 8;
  }

  if (has_binary_32()) {
    // required float binary_32 = 6;
    total_size += 1 + 4;
  }

  if (has_byte_array()) {
    // required bytes byte_array = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->byte_array());
  }

  if (has_character_array()) {
    // required string character_array = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->character_array());
  }

  if (has_enum_item()) {
    // required .mw.internal.robotics.gazebotransport.TestEnum enum_item = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->enum_item());
  }

  if (has_logical_item()) {
    // required bool logical_item = 10;
    total_size += 1 + 1;
  }

  return total_size;
}
int TestScalars::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mw.internal.robotics.gazebotransport.TestScalars)
  int total_size = 0;

  if (((_has_bits_[0] & 0x000003ff) ^ 0x000003ff) == 0) {  // All required fields are present.
    // required int64 integer_64 = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->integer_64());

    // required uint64 unsigned_integer_64 = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->unsigned_integer_64());

    // required int32 integer_32 = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->integer_32());

    // required uint32 unsigned_integer_32 = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->unsigned_integer_32());

    // required double binary_64 = 5;
    total_size += 1 + 8;

    // required float binary_32 = 6;
    total_size += 1 + 4;

    // required bytes byte_array = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->byte_array());

    // required string character_array = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->character_array());

    // required .mw.internal.robotics.gazebotransport.TestEnum enum_item = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->enum_item());

    // required bool logical_item = 10;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestScalars::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mw.internal.robotics.gazebotransport.TestScalars)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TestScalars* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TestScalars>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mw.internal.robotics.gazebotransport.TestScalars)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mw.internal.robotics.gazebotransport.TestScalars)
    MergeFrom(*source);
  }
}

void TestScalars::MergeFrom(const TestScalars& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mw.internal.robotics.gazebotransport.TestScalars)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_integer_64()) {
      set_integer_64(from.integer_64());
    }
    if (from.has_unsigned_integer_64()) {
      set_unsigned_integer_64(from.unsigned_integer_64());
    }
    if (from.has_integer_32()) {
      set_integer_32(from.integer_32());
    }
    if (from.has_unsigned_integer_32()) {
      set_unsigned_integer_32(from.unsigned_integer_32());
    }
    if (from.has_binary_64()) {
      set_binary_64(from.binary_64());
    }
    if (from.has_binary_32()) {
      set_binary_32(from.binary_32());
    }
    if (from.has_byte_array()) {
      set_has_byte_array();
      byte_array_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.byte_array_);
    }
    if (from.has_character_array()) {
      set_has_character_array();
      character_array_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.character_array_);
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_enum_item()) {
      set_enum_item(from.enum_item());
    }
    if (from.has_logical_item()) {
      set_logical_item(from.logical_item());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TestScalars::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mw.internal.robotics.gazebotransport.TestScalars)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestScalars::CopyFrom(const TestScalars& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mw.internal.robotics.gazebotransport.TestScalars)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestScalars::IsInitialized() const {
  if ((_has_bits_[0] & 0x000003ff) != 0x000003ff) return false;

  return true;
}

void TestScalars::Swap(TestScalars* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TestScalars::InternalSwap(TestScalars* other) {
  std::swap(integer_64_, other->integer_64_);
  std::swap(unsigned_integer_64_, other->unsigned_integer_64_);
  std::swap(integer_32_, other->integer_32_);
  std::swap(unsigned_integer_32_, other->unsigned_integer_32_);
  std::swap(binary_64_, other->binary_64_);
  std::swap(binary_32_, other->binary_32_);
  byte_array_.Swap(&other->byte_array_);
  character_array_.Swap(&other->character_array_);
  std::swap(enum_item_, other->enum_item_);
  std::swap(logical_item_, other->logical_item_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TestScalars::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TestScalars_descriptor_;
  metadata.reflection = TestScalars_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TestScalars

// required int64 integer_64 = 1;
bool TestScalars::has_integer_64() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TestScalars::set_has_integer_64() {
  _has_bits_[0] |= 0x00000001u;
}
void TestScalars::clear_has_integer_64() {
  _has_bits_[0] &= ~0x00000001u;
}
void TestScalars::clear_integer_64() {
  integer_64_ = GOOGLE_LONGLONG(0);
  clear_has_integer_64();
}
 ::google::protobuf::int64 TestScalars::integer_64() const {
  // @@protoc_insertion_point(field_get:mw.internal.robotics.gazebotransport.TestScalars.integer_64)
  return integer_64_;
}
 void TestScalars::set_integer_64(::google::protobuf::int64 value) {
  set_has_integer_64();
  integer_64_ = value;
  // @@protoc_insertion_point(field_set:mw.internal.robotics.gazebotransport.TestScalars.integer_64)
}

// required uint64 unsigned_integer_64 = 2;
bool TestScalars::has_unsigned_integer_64() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TestScalars::set_has_unsigned_integer_64() {
  _has_bits_[0] |= 0x00000002u;
}
void TestScalars::clear_has_unsigned_integer_64() {
  _has_bits_[0] &= ~0x00000002u;
}
void TestScalars::clear_unsigned_integer_64() {
  unsigned_integer_64_ = GOOGLE_ULONGLONG(0);
  clear_has_unsigned_integer_64();
}
 ::google::protobuf::uint64 TestScalars::unsigned_integer_64() const {
  // @@protoc_insertion_point(field_get:mw.internal.robotics.gazebotransport.TestScalars.unsigned_integer_64)
  return unsigned_integer_64_;
}
 void TestScalars::set_unsigned_integer_64(::google::protobuf::uint64 value) {
  set_has_unsigned_integer_64();
  unsigned_integer_64_ = value;
  // @@protoc_insertion_point(field_set:mw.internal.robotics.gazebotransport.TestScalars.unsigned_integer_64)
}

// required int32 integer_32 = 3;
bool TestScalars::has_integer_32() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TestScalars::set_has_integer_32() {
  _has_bits_[0] |= 0x00000004u;
}
void TestScalars::clear_has_integer_32() {
  _has_bits_[0] &= ~0x00000004u;
}
void TestScalars::clear_integer_32() {
  integer_32_ = 0;
  clear_has_integer_32();
}
 ::google::protobuf::int32 TestScalars::integer_32() const {
  // @@protoc_insertion_point(field_get:mw.internal.robotics.gazebotransport.TestScalars.integer_32)
  return integer_32_;
}
 void TestScalars::set_integer_32(::google::protobuf::int32 value) {
  set_has_integer_32();
  integer_32_ = value;
  // @@protoc_insertion_point(field_set:mw.internal.robotics.gazebotransport.TestScalars.integer_32)
}

// required uint32 unsigned_integer_32 = 4;
bool TestScalars::has_unsigned_integer_32() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TestScalars::set_has_unsigned_integer_32() {
  _has_bits_[0] |= 0x00000008u;
}
void TestScalars::clear_has_unsigned_integer_32() {
  _has_bits_[0] &= ~0x00000008u;
}
void TestScalars::clear_unsigned_integer_32() {
  unsigned_integer_32_ = 0u;
  clear_has_unsigned_integer_32();
}
 ::google::protobuf::uint32 TestScalars::unsigned_integer_32() const {
  // @@protoc_insertion_point(field_get:mw.internal.robotics.gazebotransport.TestScalars.unsigned_integer_32)
  return unsigned_integer_32_;
}
 void TestScalars::set_unsigned_integer_32(::google::protobuf::uint32 value) {
  set_has_unsigned_integer_32();
  unsigned_integer_32_ = value;
  // @@protoc_insertion_point(field_set:mw.internal.robotics.gazebotransport.TestScalars.unsigned_integer_32)
}

// required double binary_64 = 5;
bool TestScalars::has_binary_64() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void TestScalars::set_has_binary_64() {
  _has_bits_[0] |= 0x00000010u;
}
void TestScalars::clear_has_binary_64() {
  _has_bits_[0] &= ~0x00000010u;
}
void TestScalars::clear_binary_64() {
  binary_64_ = 0;
  clear_has_binary_64();
}
 double TestScalars::binary_64() const {
  // @@protoc_insertion_point(field_get:mw.internal.robotics.gazebotransport.TestScalars.binary_64)
  return binary_64_;
}
 void TestScalars::set_binary_64(double value) {
  set_has_binary_64();
  binary_64_ = value;
  // @@protoc_insertion_point(field_set:mw.internal.robotics.gazebotransport.TestScalars.binary_64)
}

// required float binary_32 = 6;
bool TestScalars::has_binary_32() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void TestScalars::set_has_binary_32() {
  _has_bits_[0] |= 0x00000020u;
}
void TestScalars::clear_has_binary_32() {
  _has_bits_[0] &= ~0x00000020u;
}
void TestScalars::clear_binary_32() {
  binary_32_ = 0;
  clear_has_binary_32();
}
 float TestScalars::binary_32() const {
  // @@protoc_insertion_point(field_get:mw.internal.robotics.gazebotransport.TestScalars.binary_32)
  return binary_32_;
}
 void TestScalars::set_binary_32(float value) {
  set_has_binary_32();
  binary_32_ = value;
  // @@protoc_insertion_point(field_set:mw.internal.robotics.gazebotransport.TestScalars.binary_32)
}

// required bytes byte_array = 7;
bool TestScalars::has_byte_array() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void TestScalars::set_has_byte_array() {
  _has_bits_[0] |= 0x00000040u;
}
void TestScalars::clear_has_byte_array() {
  _has_bits_[0] &= ~0x00000040u;
}
void TestScalars::clear_byte_array() {
  byte_array_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_byte_array();
}
 const ::std::string& TestScalars::byte_array() const {
  // @@protoc_insertion_point(field_get:mw.internal.robotics.gazebotransport.TestScalars.byte_array)
  return byte_array_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TestScalars::set_byte_array(const ::std::string& value) {
  set_has_byte_array();
  byte_array_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mw.internal.robotics.gazebotransport.TestScalars.byte_array)
}
 void TestScalars::set_byte_array(const char* value) {
  set_has_byte_array();
  byte_array_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mw.internal.robotics.gazebotransport.TestScalars.byte_array)
}
 void TestScalars::set_byte_array(const void* value, size_t size) {
  set_has_byte_array();
  byte_array_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mw.internal.robotics.gazebotransport.TestScalars.byte_array)
}
 ::std::string* TestScalars::mutable_byte_array() {
  set_has_byte_array();
  // @@protoc_insertion_point(field_mutable:mw.internal.robotics.gazebotransport.TestScalars.byte_array)
  return byte_array_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TestScalars::release_byte_array() {
  // @@protoc_insertion_point(field_release:mw.internal.robotics.gazebotransport.TestScalars.byte_array)
  clear_has_byte_array();
  return byte_array_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TestScalars::set_allocated_byte_array(::std::string* byte_array) {
  if (byte_array != NULL) {
    set_has_byte_array();
  } else {
    clear_has_byte_array();
  }
  byte_array_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), byte_array);
  // @@protoc_insertion_point(field_set_allocated:mw.internal.robotics.gazebotransport.TestScalars.byte_array)
}

// required string character_array = 8;
bool TestScalars::has_character_array() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void TestScalars::set_has_character_array() {
  _has_bits_[0] |= 0x00000080u;
}
void TestScalars::clear_has_character_array() {
  _has_bits_[0] &= ~0x00000080u;
}
void TestScalars::clear_character_array() {
  character_array_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_character_array();
}
 const ::std::string& TestScalars::character_array() const {
  // @@protoc_insertion_point(field_get:mw.internal.robotics.gazebotransport.TestScalars.character_array)
  return character_array_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TestScalars::set_character_array(const ::std::string& value) {
  set_has_character_array();
  character_array_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mw.internal.robotics.gazebotransport.TestScalars.character_array)
}
 void TestScalars::set_character_array(const char* value) {
  set_has_character_array();
  character_array_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mw.internal.robotics.gazebotransport.TestScalars.character_array)
}
 void TestScalars::set_character_array(const char* value, size_t size) {
  set_has_character_array();
  character_array_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mw.internal.robotics.gazebotransport.TestScalars.character_array)
}
 ::std::string* TestScalars::mutable_character_array() {
  set_has_character_array();
  // @@protoc_insertion_point(field_mutable:mw.internal.robotics.gazebotransport.TestScalars.character_array)
  return character_array_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TestScalars::release_character_array() {
  // @@protoc_insertion_point(field_release:mw.internal.robotics.gazebotransport.TestScalars.character_array)
  clear_has_character_array();
  return character_array_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TestScalars::set_allocated_character_array(::std::string* character_array) {
  if (character_array != NULL) {
    set_has_character_array();
  } else {
    clear_has_character_array();
  }
  character_array_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), character_array);
  // @@protoc_insertion_point(field_set_allocated:mw.internal.robotics.gazebotransport.TestScalars.character_array)
}

// required .mw.internal.robotics.gazebotransport.TestEnum enum_item = 9;
bool TestScalars::has_enum_item() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void TestScalars::set_has_enum_item() {
  _has_bits_[0] |= 0x00000100u;
}
void TestScalars::clear_has_enum_item() {
  _has_bits_[0] &= ~0x00000100u;
}
void TestScalars::clear_enum_item() {
  enum_item_ = 0;
  clear_has_enum_item();
}
 ::mw::internal::robotics::gazebotransport::TestEnum TestScalars::enum_item() const {
  // @@protoc_insertion_point(field_get:mw.internal.robotics.gazebotransport.TestScalars.enum_item)
  return static_cast< ::mw::internal::robotics::gazebotransport::TestEnum >(enum_item_);
}
 void TestScalars::set_enum_item(::mw::internal::robotics::gazebotransport::TestEnum value) {
  assert(::mw::internal::robotics::gazebotransport::TestEnum_IsValid(value));
  set_has_enum_item();
  enum_item_ = value;
  // @@protoc_insertion_point(field_set:mw.internal.robotics.gazebotransport.TestScalars.enum_item)
}

// required bool logical_item = 10;
bool TestScalars::has_logical_item() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void TestScalars::set_has_logical_item() {
  _has_bits_[0] |= 0x00000200u;
}
void TestScalars::clear_has_logical_item() {
  _has_bits_[0] &= ~0x00000200u;
}
void TestScalars::clear_logical_item() {
  logical_item_ = false;
  clear_has_logical_item();
}
 bool TestScalars::logical_item() const {
  // @@protoc_insertion_point(field_get:mw.internal.robotics.gazebotransport.TestScalars.logical_item)
  return logical_item_;
}
 void TestScalars::set_logical_item(bool value) {
  set_has_logical_item();
  logical_item_ = value;
  // @@protoc_insertion_point(field_set:mw.internal.robotics.gazebotransport.TestScalars.logical_item)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TestArrays::kInteger64FieldNumber;
const int TestArrays::kUnsignedInteger64FieldNumber;
const int TestArrays::kInteger32FieldNumber;
const int TestArrays::kUnsignedInteger32FieldNumber;
const int TestArrays::kBinary64FieldNumber;
const int TestArrays::kBinary32FieldNumber;
const int TestArrays::kByteArrayFieldNumber;
const int TestArrays::kCharacterArrayFieldNumber;
const int TestArrays::kEnumItemFieldNumber;
const int TestArrays::kLogicalItemFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TestArrays::TestArrays()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mw.internal.robotics.gazebotransport.TestArrays)
}

void TestArrays::InitAsDefaultInstance() {
}

TestArrays::TestArrays(const TestArrays& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mw.internal.robotics.gazebotransport.TestArrays)
}

void TestArrays::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TestArrays::~TestArrays() {
  // @@protoc_insertion_point(destructor:mw.internal.robotics.gazebotransport.TestArrays)
  SharedDtor();
}

void TestArrays::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TestArrays::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TestArrays::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TestArrays_descriptor_;
}

const TestArrays& TestArrays::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mw_2einternal_2erobotics_2egazebotransport_2eTestMsgs_2eproto();
  return *default_instance_;
}

TestArrays* TestArrays::default_instance_ = NULL;

TestArrays* TestArrays::New(::google::protobuf::Arena* arena) const {
  TestArrays* n = new TestArrays;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TestArrays::Clear() {
// @@protoc_insertion_point(message_clear_start:mw.internal.robotics.gazebotransport.TestArrays)
  integer_64_.Clear();
  unsigned_integer_64_.Clear();
  integer_32_.Clear();
  unsigned_integer_32_.Clear();
  binary_64_.Clear();
  binary_32_.Clear();
  byte_array_.Clear();
  character_array_.Clear();
  enum_item_.Clear();
  logical_item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TestArrays::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mw.internal.robotics.gazebotransport.TestArrays)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 integer_64 = 1;
      case 1: {
        if (tag == 8) {
         parse_integer_64:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 8, input, this->mutable_integer_64())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_integer_64())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_integer_64;
        if (input->ExpectTag(16)) goto parse_unsigned_integer_64;
        break;
      }

      // repeated uint64 unsigned_integer_64 = 2;
      case 2: {
        if (tag == 16) {
         parse_unsigned_integer_64:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16, input, this->mutable_unsigned_integer_64())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_unsigned_integer_64())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_unsigned_integer_64;
        if (input->ExpectTag(24)) goto parse_integer_32;
        break;
      }

      // repeated int32 integer_32 = 3;
      case 3: {
        if (tag == 24) {
         parse_integer_32:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_integer_32())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_integer_32())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_integer_32;
        if (input->ExpectTag(32)) goto parse_unsigned_integer_32;
        break;
      }

      // repeated uint32 unsigned_integer_32 = 4;
      case 4: {
        if (tag == 32) {
         parse_unsigned_integer_32:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_unsigned_integer_32())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_unsigned_integer_32())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_unsigned_integer_32;
        if (input->ExpectTag(41)) goto parse_binary_64;
        break;
      }

      // repeated double binary_64 = 5;
      case 5: {
        if (tag == 41) {
         parse_binary_64:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 41, input, this->mutable_binary_64())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_binary_64())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_binary_64;
        if (input->ExpectTag(53)) goto parse_binary_32;
        break;
      }

      // repeated float binary_32 = 6;
      case 6: {
        if (tag == 53) {
         parse_binary_32:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 53, input, this->mutable_binary_32())));
        } else if (tag == 50) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_binary_32())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_binary_32;
        if (input->ExpectTag(58)) goto parse_byte_array;
        break;
      }

      // repeated bytes byte_array = 7;
      case 7: {
        if (tag == 58) {
         parse_byte_array:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_byte_array()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_byte_array;
        if (input->ExpectTag(66)) goto parse_character_array;
        break;
      }

      // repeated string character_array = 8;
      case 8: {
        if (tag == 66) {
         parse_character_array:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_character_array()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->character_array(this->character_array_size() - 1).data(),
            this->character_array(this->character_array_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mw.internal.robotics.gazebotransport.TestArrays.character_array");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_character_array;
        if (input->ExpectTag(72)) goto parse_enum_item;
        break;
      }

      // repeated .mw.internal.robotics.gazebotransport.TestEnum enum_item = 9;
      case 9: {
        if (tag == 72) {
         parse_enum_item:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mw::internal::robotics::gazebotransport::TestEnum_IsValid(value)) {
            add_enum_item(static_cast< ::mw::internal::robotics::gazebotransport::TestEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(9, value);
          }
        } else if (tag == 74) {
          DO_((::google::protobuf::internal::WireFormat::ReadPackedEnumPreserveUnknowns(
                 input,
                 9,
                 ::mw::internal::robotics::gazebotransport::TestEnum_IsValid,
                 mutable_unknown_fields(),
                 this->mutable_enum_item())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_enum_item;
        if (input->ExpectTag(80)) goto parse_logical_item;
        break;
      }

      // repeated bool logical_item = 10;
      case 10: {
        if (tag == 80) {
         parse_logical_item:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 80, input, this->mutable_logical_item())));
        } else if (tag == 82) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_logical_item())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_logical_item;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mw.internal.robotics.gazebotransport.TestArrays)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mw.internal.robotics.gazebotransport.TestArrays)
  return false;
#undef DO_
}

void TestArrays::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mw.internal.robotics.gazebotransport.TestArrays)
  // repeated int64 integer_64 = 1;
  for (int i = 0; i < this->integer_64_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      1, this->integer_64(i), output);
  }

  // repeated uint64 unsigned_integer_64 = 2;
  for (int i = 0; i < this->unsigned_integer_64_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->unsigned_integer_64(i), output);
  }

  // repeated int32 integer_32 = 3;
  for (int i = 0; i < this->integer_32_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->integer_32(i), output);
  }

  // repeated uint32 unsigned_integer_32 = 4;
  for (int i = 0; i < this->unsigned_integer_32_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->unsigned_integer_32(i), output);
  }

  // repeated double binary_64 = 5;
  for (int i = 0; i < this->binary_64_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      5, this->binary_64(i), output);
  }

  // repeated float binary_32 = 6;
  for (int i = 0; i < this->binary_32_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      6, this->binary_32(i), output);
  }

  // repeated bytes byte_array = 7;
  for (int i = 0; i < this->byte_array_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      7, this->byte_array(i), output);
  }

  // repeated string character_array = 8;
  for (int i = 0; i < this->character_array_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->character_array(i).data(), this->character_array(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mw.internal.robotics.gazebotransport.TestArrays.character_array");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->character_array(i), output);
  }

  // repeated .mw.internal.robotics.gazebotransport.TestEnum enum_item = 9;
  for (int i = 0; i < this->enum_item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->enum_item(i), output);
  }

  // repeated bool logical_item = 10;
  for (int i = 0; i < this->logical_item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      10, this->logical_item(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mw.internal.robotics.gazebotransport.TestArrays)
}

::google::protobuf::uint8* TestArrays::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mw.internal.robotics.gazebotransport.TestArrays)
  // repeated int64 integer_64 = 1;
  for (int i = 0; i < this->integer_64_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(1, this->integer_64(i), target);
  }

  // repeated uint64 unsigned_integer_64 = 2;
  for (int i = 0; i < this->unsigned_integer_64_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(2, this->unsigned_integer_64(i), target);
  }

  // repeated int32 integer_32 = 3;
  for (int i = 0; i < this->integer_32_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->integer_32(i), target);
  }

  // repeated uint32 unsigned_integer_32 = 4;
  for (int i = 0; i < this->unsigned_integer_32_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->unsigned_integer_32(i), target);
  }

  // repeated double binary_64 = 5;
  for (int i = 0; i < this->binary_64_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(5, this->binary_64(i), target);
  }

  // repeated float binary_32 = 6;
  for (int i = 0; i < this->binary_32_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(6, this->binary_32(i), target);
  }

  // repeated bytes byte_array = 7;
  for (int i = 0; i < this->byte_array_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(7, this->byte_array(i), target);
  }

  // repeated string character_array = 8;
  for (int i = 0; i < this->character_array_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->character_array(i).data(), this->character_array(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mw.internal.robotics.gazebotransport.TestArrays.character_array");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(8, this->character_array(i), target);
  }

  // repeated .mw.internal.robotics.gazebotransport.TestEnum enum_item = 9;
  for (int i = 0; i < this->enum_item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->enum_item(i), target);
  }

  // repeated bool logical_item = 10;
  for (int i = 0; i < this->logical_item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolToArray(10, this->logical_item(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mw.internal.robotics.gazebotransport.TestArrays)
  return target;
}

int TestArrays::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mw.internal.robotics.gazebotransport.TestArrays)
  int total_size = 0;

  // repeated int64 integer_64 = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->integer_64_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->integer_64(i));
    }
    total_size += 1 * this->integer_64_size() + data_size;
  }

  // repeated uint64 unsigned_integer_64 = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->unsigned_integer_64_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->unsigned_integer_64(i));
    }
    total_size += 1 * this->unsigned_integer_64_size() + data_size;
  }

  // repeated int32 integer_32 = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->integer_32_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->integer_32(i));
    }
    total_size += 1 * this->integer_32_size() + data_size;
  }

  // repeated uint32 unsigned_integer_32 = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->unsigned_integer_32_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->unsigned_integer_32(i));
    }
    total_size += 1 * this->unsigned_integer_32_size() + data_size;
  }

  // repeated double binary_64 = 5;
  {
    int data_size = 0;
    data_size = 8 * this->binary_64_size();
    total_size += 1 * this->binary_64_size() + data_size;
  }

  // repeated float binary_32 = 6;
  {
    int data_size = 0;
    data_size = 4 * this->binary_32_size();
    total_size += 1 * this->binary_32_size() + data_size;
  }

  // repeated bytes byte_array = 7;
  total_size += 1 * this->byte_array_size();
  for (int i = 0; i < this->byte_array_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->byte_array(i));
  }

  // repeated string character_array = 8;
  total_size += 1 * this->character_array_size();
  for (int i = 0; i < this->character_array_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->character_array(i));
  }

  // repeated .mw.internal.robotics.gazebotransport.TestEnum enum_item = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->enum_item_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->enum_item(i));
    }
    total_size += 1 * this->enum_item_size() + data_size;
  }

  // repeated bool logical_item = 10;
  {
    int data_size = 0;
    data_size = 1 * this->logical_item_size();
    total_size += 1 * this->logical_item_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestArrays::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mw.internal.robotics.gazebotransport.TestArrays)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TestArrays* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TestArrays>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mw.internal.robotics.gazebotransport.TestArrays)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mw.internal.robotics.gazebotransport.TestArrays)
    MergeFrom(*source);
  }
}

void TestArrays::MergeFrom(const TestArrays& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mw.internal.robotics.gazebotransport.TestArrays)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  integer_64_.MergeFrom(from.integer_64_);
  unsigned_integer_64_.MergeFrom(from.unsigned_integer_64_);
  integer_32_.MergeFrom(from.integer_32_);
  unsigned_integer_32_.MergeFrom(from.unsigned_integer_32_);
  binary_64_.MergeFrom(from.binary_64_);
  binary_32_.MergeFrom(from.binary_32_);
  byte_array_.MergeFrom(from.byte_array_);
  character_array_.MergeFrom(from.character_array_);
  enum_item_.MergeFrom(from.enum_item_);
  logical_item_.MergeFrom(from.logical_item_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TestArrays::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mw.internal.robotics.gazebotransport.TestArrays)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestArrays::CopyFrom(const TestArrays& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mw.internal.robotics.gazebotransport.TestArrays)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestArrays::IsInitialized() const {

  return true;
}

void TestArrays::Swap(TestArrays* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TestArrays::InternalSwap(TestArrays* other) {
  integer_64_.UnsafeArenaSwap(&other->integer_64_);
  unsigned_integer_64_.UnsafeArenaSwap(&other->unsigned_integer_64_);
  integer_32_.UnsafeArenaSwap(&other->integer_32_);
  unsigned_integer_32_.UnsafeArenaSwap(&other->unsigned_integer_32_);
  binary_64_.UnsafeArenaSwap(&other->binary_64_);
  binary_32_.UnsafeArenaSwap(&other->binary_32_);
  byte_array_.UnsafeArenaSwap(&other->byte_array_);
  character_array_.UnsafeArenaSwap(&other->character_array_);
  enum_item_.UnsafeArenaSwap(&other->enum_item_);
  logical_item_.UnsafeArenaSwap(&other->logical_item_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TestArrays::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TestArrays_descriptor_;
  metadata.reflection = TestArrays_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TestArrays

// repeated int64 integer_64 = 1;
int TestArrays::integer_64_size() const {
  return integer_64_.size();
}
void TestArrays::clear_integer_64() {
  integer_64_.Clear();
}
 ::google::protobuf::int64 TestArrays::integer_64(int index) const {
  // @@protoc_insertion_point(field_get:mw.internal.robotics.gazebotransport.TestArrays.integer_64)
  return integer_64_.Get(index);
}
 void TestArrays::set_integer_64(int index, ::google::protobuf::int64 value) {
  integer_64_.Set(index, value);
  // @@protoc_insertion_point(field_set:mw.internal.robotics.gazebotransport.TestArrays.integer_64)
}
 void TestArrays::add_integer_64(::google::protobuf::int64 value) {
  integer_64_.Add(value);
  // @@protoc_insertion_point(field_add:mw.internal.robotics.gazebotransport.TestArrays.integer_64)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
TestArrays::integer_64() const {
  // @@protoc_insertion_point(field_list:mw.internal.robotics.gazebotransport.TestArrays.integer_64)
  return integer_64_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
TestArrays::mutable_integer_64() {
  // @@protoc_insertion_point(field_mutable_list:mw.internal.robotics.gazebotransport.TestArrays.integer_64)
  return &integer_64_;
}

// repeated uint64 unsigned_integer_64 = 2;
int TestArrays::unsigned_integer_64_size() const {
  return unsigned_integer_64_.size();
}
void TestArrays::clear_unsigned_integer_64() {
  unsigned_integer_64_.Clear();
}
 ::google::protobuf::uint64 TestArrays::unsigned_integer_64(int index) const {
  // @@protoc_insertion_point(field_get:mw.internal.robotics.gazebotransport.TestArrays.unsigned_integer_64)
  return unsigned_integer_64_.Get(index);
}
 void TestArrays::set_unsigned_integer_64(int index, ::google::protobuf::uint64 value) {
  unsigned_integer_64_.Set(index, value);
  // @@protoc_insertion_point(field_set:mw.internal.robotics.gazebotransport.TestArrays.unsigned_integer_64)
}
 void TestArrays::add_unsigned_integer_64(::google::protobuf::uint64 value) {
  unsigned_integer_64_.Add(value);
  // @@protoc_insertion_point(field_add:mw.internal.robotics.gazebotransport.TestArrays.unsigned_integer_64)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
TestArrays::unsigned_integer_64() const {
  // @@protoc_insertion_point(field_list:mw.internal.robotics.gazebotransport.TestArrays.unsigned_integer_64)
  return unsigned_integer_64_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
TestArrays::mutable_unsigned_integer_64() {
  // @@protoc_insertion_point(field_mutable_list:mw.internal.robotics.gazebotransport.TestArrays.unsigned_integer_64)
  return &unsigned_integer_64_;
}

// repeated int32 integer_32 = 3;
int TestArrays::integer_32_size() const {
  return integer_32_.size();
}
void TestArrays::clear_integer_32() {
  integer_32_.Clear();
}
 ::google::protobuf::int32 TestArrays::integer_32(int index) const {
  // @@protoc_insertion_point(field_get:mw.internal.robotics.gazebotransport.TestArrays.integer_32)
  return integer_32_.Get(index);
}
 void TestArrays::set_integer_32(int index, ::google::protobuf::int32 value) {
  integer_32_.Set(index, value);
  // @@protoc_insertion_point(field_set:mw.internal.robotics.gazebotransport.TestArrays.integer_32)
}
 void TestArrays::add_integer_32(::google::protobuf::int32 value) {
  integer_32_.Add(value);
  // @@protoc_insertion_point(field_add:mw.internal.robotics.gazebotransport.TestArrays.integer_32)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
TestArrays::integer_32() const {
  // @@protoc_insertion_point(field_list:mw.internal.robotics.gazebotransport.TestArrays.integer_32)
  return integer_32_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
TestArrays::mutable_integer_32() {
  // @@protoc_insertion_point(field_mutable_list:mw.internal.robotics.gazebotransport.TestArrays.integer_32)
  return &integer_32_;
}

// repeated uint32 unsigned_integer_32 = 4;
int TestArrays::unsigned_integer_32_size() const {
  return unsigned_integer_32_.size();
}
void TestArrays::clear_unsigned_integer_32() {
  unsigned_integer_32_.Clear();
}
 ::google::protobuf::uint32 TestArrays::unsigned_integer_32(int index) const {
  // @@protoc_insertion_point(field_get:mw.internal.robotics.gazebotransport.TestArrays.unsigned_integer_32)
  return unsigned_integer_32_.Get(index);
}
 void TestArrays::set_unsigned_integer_32(int index, ::google::protobuf::uint32 value) {
  unsigned_integer_32_.Set(index, value);
  // @@protoc_insertion_point(field_set:mw.internal.robotics.gazebotransport.TestArrays.unsigned_integer_32)
}
 void TestArrays::add_unsigned_integer_32(::google::protobuf::uint32 value) {
  unsigned_integer_32_.Add(value);
  // @@protoc_insertion_point(field_add:mw.internal.robotics.gazebotransport.TestArrays.unsigned_integer_32)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TestArrays::unsigned_integer_32() const {
  // @@protoc_insertion_point(field_list:mw.internal.robotics.gazebotransport.TestArrays.unsigned_integer_32)
  return unsigned_integer_32_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TestArrays::mutable_unsigned_integer_32() {
  // @@protoc_insertion_point(field_mutable_list:mw.internal.robotics.gazebotransport.TestArrays.unsigned_integer_32)
  return &unsigned_integer_32_;
}

// repeated double binary_64 = 5;
int TestArrays::binary_64_size() const {
  return binary_64_.size();
}
void TestArrays::clear_binary_64() {
  binary_64_.Clear();
}
 double TestArrays::binary_64(int index) const {
  // @@protoc_insertion_point(field_get:mw.internal.robotics.gazebotransport.TestArrays.binary_64)
  return binary_64_.Get(index);
}
 void TestArrays::set_binary_64(int index, double value) {
  binary_64_.Set(index, value);
  // @@protoc_insertion_point(field_set:mw.internal.robotics.gazebotransport.TestArrays.binary_64)
}
 void TestArrays::add_binary_64(double value) {
  binary_64_.Add(value);
  // @@protoc_insertion_point(field_add:mw.internal.robotics.gazebotransport.TestArrays.binary_64)
}
 const ::google::protobuf::RepeatedField< double >&
TestArrays::binary_64() const {
  // @@protoc_insertion_point(field_list:mw.internal.robotics.gazebotransport.TestArrays.binary_64)
  return binary_64_;
}
 ::google::protobuf::RepeatedField< double >*
TestArrays::mutable_binary_64() {
  // @@protoc_insertion_point(field_mutable_list:mw.internal.robotics.gazebotransport.TestArrays.binary_64)
  return &binary_64_;
}

// repeated float binary_32 = 6;
int TestArrays::binary_32_size() const {
  return binary_32_.size();
}
void TestArrays::clear_binary_32() {
  binary_32_.Clear();
}
 float TestArrays::binary_32(int index) const {
  // @@protoc_insertion_point(field_get:mw.internal.robotics.gazebotransport.TestArrays.binary_32)
  return binary_32_.Get(index);
}
 void TestArrays::set_binary_32(int index, float value) {
  binary_32_.Set(index, value);
  // @@protoc_insertion_point(field_set:mw.internal.robotics.gazebotransport.TestArrays.binary_32)
}
 void TestArrays::add_binary_32(float value) {
  binary_32_.Add(value);
  // @@protoc_insertion_point(field_add:mw.internal.robotics.gazebotransport.TestArrays.binary_32)
}
 const ::google::protobuf::RepeatedField< float >&
TestArrays::binary_32() const {
  // @@protoc_insertion_point(field_list:mw.internal.robotics.gazebotransport.TestArrays.binary_32)
  return binary_32_;
}
 ::google::protobuf::RepeatedField< float >*
TestArrays::mutable_binary_32() {
  // @@protoc_insertion_point(field_mutable_list:mw.internal.robotics.gazebotransport.TestArrays.binary_32)
  return &binary_32_;
}

// repeated bytes byte_array = 7;
int TestArrays::byte_array_size() const {
  return byte_array_.size();
}
void TestArrays::clear_byte_array() {
  byte_array_.Clear();
}
 const ::std::string& TestArrays::byte_array(int index) const {
  // @@protoc_insertion_point(field_get:mw.internal.robotics.gazebotransport.TestArrays.byte_array)
  return byte_array_.Get(index);
}
 ::std::string* TestArrays::mutable_byte_array(int index) {
  // @@protoc_insertion_point(field_mutable:mw.internal.robotics.gazebotransport.TestArrays.byte_array)
  return byte_array_.Mutable(index);
}
 void TestArrays::set_byte_array(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:mw.internal.robotics.gazebotransport.TestArrays.byte_array)
  byte_array_.Mutable(index)->assign(value);
}
 void TestArrays::set_byte_array(int index, const char* value) {
  byte_array_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mw.internal.robotics.gazebotransport.TestArrays.byte_array)
}
 void TestArrays::set_byte_array(int index, const void* value, size_t size) {
  byte_array_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mw.internal.robotics.gazebotransport.TestArrays.byte_array)
}
 ::std::string* TestArrays::add_byte_array() {
  // @@protoc_insertion_point(field_add_mutable:mw.internal.robotics.gazebotransport.TestArrays.byte_array)
  return byte_array_.Add();
}
 void TestArrays::add_byte_array(const ::std::string& value) {
  byte_array_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:mw.internal.robotics.gazebotransport.TestArrays.byte_array)
}
 void TestArrays::add_byte_array(const char* value) {
  byte_array_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mw.internal.robotics.gazebotransport.TestArrays.byte_array)
}
 void TestArrays::add_byte_array(const void* value, size_t size) {
  byte_array_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mw.internal.robotics.gazebotransport.TestArrays.byte_array)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
TestArrays::byte_array() const {
  // @@protoc_insertion_point(field_list:mw.internal.robotics.gazebotransport.TestArrays.byte_array)
  return byte_array_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
TestArrays::mutable_byte_array() {
  // @@protoc_insertion_point(field_mutable_list:mw.internal.robotics.gazebotransport.TestArrays.byte_array)
  return &byte_array_;
}

// repeated string character_array = 8;
int TestArrays::character_array_size() const {
  return character_array_.size();
}
void TestArrays::clear_character_array() {
  character_array_.Clear();
}
 const ::std::string& TestArrays::character_array(int index) const {
  // @@protoc_insertion_point(field_get:mw.internal.robotics.gazebotransport.TestArrays.character_array)
  return character_array_.Get(index);
}
 ::std::string* TestArrays::mutable_character_array(int index) {
  // @@protoc_insertion_point(field_mutable:mw.internal.robotics.gazebotransport.TestArrays.character_array)
  return character_array_.Mutable(index);
}
 void TestArrays::set_character_array(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:mw.internal.robotics.gazebotransport.TestArrays.character_array)
  character_array_.Mutable(index)->assign(value);
}
 void TestArrays::set_character_array(int index, const char* value) {
  character_array_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mw.internal.robotics.gazebotransport.TestArrays.character_array)
}
 void TestArrays::set_character_array(int index, const char* value, size_t size) {
  character_array_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mw.internal.robotics.gazebotransport.TestArrays.character_array)
}
 ::std::string* TestArrays::add_character_array() {
  // @@protoc_insertion_point(field_add_mutable:mw.internal.robotics.gazebotransport.TestArrays.character_array)
  return character_array_.Add();
}
 void TestArrays::add_character_array(const ::std::string& value) {
  character_array_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:mw.internal.robotics.gazebotransport.TestArrays.character_array)
}
 void TestArrays::add_character_array(const char* value) {
  character_array_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mw.internal.robotics.gazebotransport.TestArrays.character_array)
}
 void TestArrays::add_character_array(const char* value, size_t size) {
  character_array_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mw.internal.robotics.gazebotransport.TestArrays.character_array)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
TestArrays::character_array() const {
  // @@protoc_insertion_point(field_list:mw.internal.robotics.gazebotransport.TestArrays.character_array)
  return character_array_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
TestArrays::mutable_character_array() {
  // @@protoc_insertion_point(field_mutable_list:mw.internal.robotics.gazebotransport.TestArrays.character_array)
  return &character_array_;
}

// repeated .mw.internal.robotics.gazebotransport.TestEnum enum_item = 9;
int TestArrays::enum_item_size() const {
  return enum_item_.size();
}
void TestArrays::clear_enum_item() {
  enum_item_.Clear();
}
 ::mw::internal::robotics::gazebotransport::TestEnum TestArrays::enum_item(int index) const {
  // @@protoc_insertion_point(field_get:mw.internal.robotics.gazebotransport.TestArrays.enum_item)
  return static_cast< ::mw::internal::robotics::gazebotransport::TestEnum >(enum_item_.Get(index));
}
 void TestArrays::set_enum_item(int index, ::mw::internal::robotics::gazebotransport::TestEnum value) {
  assert(::mw::internal::robotics::gazebotransport::TestEnum_IsValid(value));
  enum_item_.Set(index, value);
  // @@protoc_insertion_point(field_set:mw.internal.robotics.gazebotransport.TestArrays.enum_item)
}
 void TestArrays::add_enum_item(::mw::internal::robotics::gazebotransport::TestEnum value) {
  assert(::mw::internal::robotics::gazebotransport::TestEnum_IsValid(value));
  enum_item_.Add(value);
  // @@protoc_insertion_point(field_add:mw.internal.robotics.gazebotransport.TestArrays.enum_item)
}
 const ::google::protobuf::RepeatedField<int>&
TestArrays::enum_item() const {
  // @@protoc_insertion_point(field_list:mw.internal.robotics.gazebotransport.TestArrays.enum_item)
  return enum_item_;
}
 ::google::protobuf::RepeatedField<int>*
TestArrays::mutable_enum_item() {
  // @@protoc_insertion_point(field_mutable_list:mw.internal.robotics.gazebotransport.TestArrays.enum_item)
  return &enum_item_;
}

// repeated bool logical_item = 10;
int TestArrays::logical_item_size() const {
  return logical_item_.size();
}
void TestArrays::clear_logical_item() {
  logical_item_.Clear();
}
 bool TestArrays::logical_item(int index) const {
  // @@protoc_insertion_point(field_get:mw.internal.robotics.gazebotransport.TestArrays.logical_item)
  return logical_item_.Get(index);
}
 void TestArrays::set_logical_item(int index, bool value) {
  logical_item_.Set(index, value);
  // @@protoc_insertion_point(field_set:mw.internal.robotics.gazebotransport.TestArrays.logical_item)
}
 void TestArrays::add_logical_item(bool value) {
  logical_item_.Add(value);
  // @@protoc_insertion_point(field_add:mw.internal.robotics.gazebotransport.TestArrays.logical_item)
}
 const ::google::protobuf::RepeatedField< bool >&
TestArrays::logical_item() const {
  // @@protoc_insertion_point(field_list:mw.internal.robotics.gazebotransport.TestArrays.logical_item)
  return logical_item_;
}
 ::google::protobuf::RepeatedField< bool >*
TestArrays::mutable_logical_item() {
  // @@protoc_insertion_point(field_mutable_list:mw.internal.robotics.gazebotransport.TestArrays.logical_item)
  return &logical_item_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TestNestedMessage::kScalarNestedMessageFieldNumber;
const int TestNestedMessage::kArrayNestedMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TestNestedMessage::TestNestedMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mw.internal.robotics.gazebotransport.TestNestedMessage)
}

void TestNestedMessage::InitAsDefaultInstance() {
  scalar_nested_message_ = const_cast< ::mw::internal::robotics::gazebotransport::TestScalars*>(&::mw::internal::robotics::gazebotransport::TestScalars::default_instance());
}

TestNestedMessage::TestNestedMessage(const TestNestedMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mw.internal.robotics.gazebotransport.TestNestedMessage)
}

void TestNestedMessage::SharedCtor() {
  _cached_size_ = 0;
  scalar_nested_message_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TestNestedMessage::~TestNestedMessage() {
  // @@protoc_insertion_point(destructor:mw.internal.robotics.gazebotransport.TestNestedMessage)
  SharedDtor();
}

void TestNestedMessage::SharedDtor() {
  if (this != default_instance_) {
    delete scalar_nested_message_;
  }
}

void TestNestedMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TestNestedMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TestNestedMessage_descriptor_;
}

const TestNestedMessage& TestNestedMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mw_2einternal_2erobotics_2egazebotransport_2eTestMsgs_2eproto();
  return *default_instance_;
}

TestNestedMessage* TestNestedMessage::default_instance_ = NULL;

TestNestedMessage* TestNestedMessage::New(::google::protobuf::Arena* arena) const {
  TestNestedMessage* n = new TestNestedMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TestNestedMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:mw.internal.robotics.gazebotransport.TestNestedMessage)
  if (has_scalar_nested_message()) {
    if (scalar_nested_message_ != NULL) scalar_nested_message_->::mw::internal::robotics::gazebotransport::TestScalars::Clear();
  }
  array_nested_message_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TestNestedMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mw.internal.robotics.gazebotransport.TestNestedMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .mw.internal.robotics.gazebotransport.TestScalars scalar_nested_message = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scalar_nested_message()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_array_nested_message;
        break;
      }

      // repeated .mw.internal.robotics.gazebotransport.TestScalars array_nested_message = 2;
      case 2: {
        if (tag == 18) {
         parse_array_nested_message:
          DO_(input->IncrementRecursionDepth());
         parse_loop_array_nested_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_array_nested_message()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_array_nested_message;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mw.internal.robotics.gazebotransport.TestNestedMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mw.internal.robotics.gazebotransport.TestNestedMessage)
  return false;
#undef DO_
}

void TestNestedMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mw.internal.robotics.gazebotransport.TestNestedMessage)
  // required .mw.internal.robotics.gazebotransport.TestScalars scalar_nested_message = 1;
  if (has_scalar_nested_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->scalar_nested_message_, output);
  }

  // repeated .mw.internal.robotics.gazebotransport.TestScalars array_nested_message = 2;
  for (unsigned int i = 0, n = this->array_nested_message_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->array_nested_message(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mw.internal.robotics.gazebotransport.TestNestedMessage)
}

::google::protobuf::uint8* TestNestedMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mw.internal.robotics.gazebotransport.TestNestedMessage)
  // required .mw.internal.robotics.gazebotransport.TestScalars scalar_nested_message = 1;
  if (has_scalar_nested_message()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->scalar_nested_message_, false, target);
  }

  // repeated .mw.internal.robotics.gazebotransport.TestScalars array_nested_message = 2;
  for (unsigned int i = 0, n = this->array_nested_message_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->array_nested_message(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mw.internal.robotics.gazebotransport.TestNestedMessage)
  return target;
}

int TestNestedMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mw.internal.robotics.gazebotransport.TestNestedMessage)
  int total_size = 0;

  // required .mw.internal.robotics.gazebotransport.TestScalars scalar_nested_message = 1;
  if (has_scalar_nested_message()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->scalar_nested_message_);
  }
  // repeated .mw.internal.robotics.gazebotransport.TestScalars array_nested_message = 2;
  total_size += 1 * this->array_nested_message_size();
  for (int i = 0; i < this->array_nested_message_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->array_nested_message(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestNestedMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mw.internal.robotics.gazebotransport.TestNestedMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TestNestedMessage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TestNestedMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mw.internal.robotics.gazebotransport.TestNestedMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mw.internal.robotics.gazebotransport.TestNestedMessage)
    MergeFrom(*source);
  }
}

void TestNestedMessage::MergeFrom(const TestNestedMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mw.internal.robotics.gazebotransport.TestNestedMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  array_nested_message_.MergeFrom(from.array_nested_message_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_scalar_nested_message()) {
      mutable_scalar_nested_message()->::mw::internal::robotics::gazebotransport::TestScalars::MergeFrom(from.scalar_nested_message());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TestNestedMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mw.internal.robotics.gazebotransport.TestNestedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestNestedMessage::CopyFrom(const TestNestedMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mw.internal.robotics.gazebotransport.TestNestedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestNestedMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_scalar_nested_message()) {
    if (!this->scalar_nested_message_->IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->array_nested_message())) return false;
  return true;
}

void TestNestedMessage::Swap(TestNestedMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TestNestedMessage::InternalSwap(TestNestedMessage* other) {
  std::swap(scalar_nested_message_, other->scalar_nested_message_);
  array_nested_message_.UnsafeArenaSwap(&other->array_nested_message_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TestNestedMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TestNestedMessage_descriptor_;
  metadata.reflection = TestNestedMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TestNestedMessage

// required .mw.internal.robotics.gazebotransport.TestScalars scalar_nested_message = 1;
bool TestNestedMessage::has_scalar_nested_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TestNestedMessage::set_has_scalar_nested_message() {
  _has_bits_[0] |= 0x00000001u;
}
void TestNestedMessage::clear_has_scalar_nested_message() {
  _has_bits_[0] &= ~0x00000001u;
}
void TestNestedMessage::clear_scalar_nested_message() {
  if (scalar_nested_message_ != NULL) scalar_nested_message_->::mw::internal::robotics::gazebotransport::TestScalars::Clear();
  clear_has_scalar_nested_message();
}
const ::mw::internal::robotics::gazebotransport::TestScalars& TestNestedMessage::scalar_nested_message() const {
  // @@protoc_insertion_point(field_get:mw.internal.robotics.gazebotransport.TestNestedMessage.scalar_nested_message)
  return scalar_nested_message_ != NULL ? *scalar_nested_message_ : *default_instance_->scalar_nested_message_;
}
::mw::internal::robotics::gazebotransport::TestScalars* TestNestedMessage::mutable_scalar_nested_message() {
  set_has_scalar_nested_message();
  if (scalar_nested_message_ == NULL) {
    scalar_nested_message_ = new ::mw::internal::robotics::gazebotransport::TestScalars;
  }
  // @@protoc_insertion_point(field_mutable:mw.internal.robotics.gazebotransport.TestNestedMessage.scalar_nested_message)
  return scalar_nested_message_;
}
::mw::internal::robotics::gazebotransport::TestScalars* TestNestedMessage::release_scalar_nested_message() {
  // @@protoc_insertion_point(field_release:mw.internal.robotics.gazebotransport.TestNestedMessage.scalar_nested_message)
  clear_has_scalar_nested_message();
  ::mw::internal::robotics::gazebotransport::TestScalars* temp = scalar_nested_message_;
  scalar_nested_message_ = NULL;
  return temp;
}
void TestNestedMessage::set_allocated_scalar_nested_message(::mw::internal::robotics::gazebotransport::TestScalars* scalar_nested_message) {
  delete scalar_nested_message_;
  scalar_nested_message_ = scalar_nested_message;
  if (scalar_nested_message) {
    set_has_scalar_nested_message();
  } else {
    clear_has_scalar_nested_message();
  }
  // @@protoc_insertion_point(field_set_allocated:mw.internal.robotics.gazebotransport.TestNestedMessage.scalar_nested_message)
}

// repeated .mw.internal.robotics.gazebotransport.TestScalars array_nested_message = 2;
int TestNestedMessage::array_nested_message_size() const {
  return array_nested_message_.size();
}
void TestNestedMessage::clear_array_nested_message() {
  array_nested_message_.Clear();
}
const ::mw::internal::robotics::gazebotransport::TestScalars& TestNestedMessage::array_nested_message(int index) const {
  // @@protoc_insertion_point(field_get:mw.internal.robotics.gazebotransport.TestNestedMessage.array_nested_message)
  return array_nested_message_.Get(index);
}
::mw::internal::robotics::gazebotransport::TestScalars* TestNestedMessage::mutable_array_nested_message(int index) {
  // @@protoc_insertion_point(field_mutable:mw.internal.robotics.gazebotransport.TestNestedMessage.array_nested_message)
  return array_nested_message_.Mutable(index);
}
::mw::internal::robotics::gazebotransport::TestScalars* TestNestedMessage::add_array_nested_message() {
  // @@protoc_insertion_point(field_add:mw.internal.robotics.gazebotransport.TestNestedMessage.array_nested_message)
  return array_nested_message_.Add();
}
::google::protobuf::RepeatedPtrField< ::mw::internal::robotics::gazebotransport::TestScalars >*
TestNestedMessage::mutable_array_nested_message() {
  // @@protoc_insertion_point(field_mutable_list:mw.internal.robotics.gazebotransport.TestNestedMessage.array_nested_message)
  return &array_nested_message_;
}
const ::google::protobuf::RepeatedPtrField< ::mw::internal::robotics::gazebotransport::TestScalars >&
TestNestedMessage::array_nested_message() const {
  // @@protoc_insertion_point(field_list:mw.internal.robotics.gazebotransport.TestNestedMessage.array_nested_message)
  return array_nested_message_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TestMessage::kHeaderFieldNumber;
const int TestMessage::kTestScalarFieldNumber;
const int TestMessage::kTestArrayFieldNumber;
const int TestMessage::kTestNestedMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TestMessage::TestMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mw.internal.robotics.gazebotransport.TestMessage)
}

void TestMessage::InitAsDefaultInstance() {
  TestMessage_default_oneof_instance_->test_scalar_ = const_cast< ::mw::internal::robotics::gazebotransport::TestScalars*>(&::mw::internal::robotics::gazebotransport::TestScalars::default_instance());
  TestMessage_default_oneof_instance_->test_array_ = const_cast< ::mw::internal::robotics::gazebotransport::TestArrays*>(&::mw::internal::robotics::gazebotransport::TestArrays::default_instance());
  TestMessage_default_oneof_instance_->test_nested_message_ = const_cast< ::mw::internal::robotics::gazebotransport::TestNestedMessage*>(&::mw::internal::robotics::gazebotransport::TestNestedMessage::default_instance());
}

TestMessage::TestMessage(const TestMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mw.internal.robotics.gazebotransport.TestMessage)
}

void TestMessage::SharedCtor() {
  _cached_size_ = 0;
  header_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  clear_has_payload();
}

TestMessage::~TestMessage() {
  // @@protoc_insertion_point(destructor:mw.internal.robotics.gazebotransport.TestMessage)
  SharedDtor();
}

void TestMessage::SharedDtor() {
  if (has_payload()) {
    clear_payload();
  }
  if (this != default_instance_) {
  }
}

void TestMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TestMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TestMessage_descriptor_;
}

const TestMessage& TestMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mw_2einternal_2erobotics_2egazebotransport_2eTestMsgs_2eproto();
  return *default_instance_;
}

TestMessage* TestMessage::default_instance_ = NULL;

TestMessage* TestMessage::New(::google::protobuf::Arena* arena) const {
  TestMessage* n = new TestMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TestMessage::clear_payload() {
// @@protoc_insertion_point(one_of_clear_start:mw.internal.robotics.gazebotransport.TestMessage)
  switch(payload_case()) {
    case kTestScalar: {
      delete payload_.test_scalar_;
      break;
    }
    case kTestArray: {
      delete payload_.test_array_;
      break;
    }
    case kTestNestedMessage: {
      delete payload_.test_nested_message_;
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}


void TestMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:mw.internal.robotics.gazebotransport.TestMessage)
  header_ = 0;
  clear_payload();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TestMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mw.internal.robotics.gazebotransport.TestMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double header = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &header_)));
          set_has_header();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_test_scalar;
        break;
      }

      // optional .mw.internal.robotics.gazebotransport.TestScalars test_scalar = 2;
      case 2: {
        if (tag == 18) {
         parse_test_scalar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_test_scalar()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_test_array;
        break;
      }

      // optional .mw.internal.robotics.gazebotransport.TestArrays test_array = 3;
      case 3: {
        if (tag == 26) {
         parse_test_array:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_test_array()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_test_nested_message;
        break;
      }

      // optional .mw.internal.robotics.gazebotransport.TestNestedMessage test_nested_message = 4;
      case 4: {
        if (tag == 34) {
         parse_test_nested_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_test_nested_message()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mw.internal.robotics.gazebotransport.TestMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mw.internal.robotics.gazebotransport.TestMessage)
  return false;
#undef DO_
}

void TestMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mw.internal.robotics.gazebotransport.TestMessage)
  // required double header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->header(), output);
  }

  // optional .mw.internal.robotics.gazebotransport.TestScalars test_scalar = 2;
  if (has_test_scalar()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *payload_.test_scalar_, output);
  }

  // optional .mw.internal.robotics.gazebotransport.TestArrays test_array = 3;
  if (has_test_array()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *payload_.test_array_, output);
  }

  // optional .mw.internal.robotics.gazebotransport.TestNestedMessage test_nested_message = 4;
  if (has_test_nested_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *payload_.test_nested_message_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mw.internal.robotics.gazebotransport.TestMessage)
}

::google::protobuf::uint8* TestMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mw.internal.robotics.gazebotransport.TestMessage)
  // required double header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->header(), target);
  }

  // optional .mw.internal.robotics.gazebotransport.TestScalars test_scalar = 2;
  if (has_test_scalar()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *payload_.test_scalar_, false, target);
  }

  // optional .mw.internal.robotics.gazebotransport.TestArrays test_array = 3;
  if (has_test_array()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *payload_.test_array_, false, target);
  }

  // optional .mw.internal.robotics.gazebotransport.TestNestedMessage test_nested_message = 4;
  if (has_test_nested_message()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *payload_.test_nested_message_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mw.internal.robotics.gazebotransport.TestMessage)
  return target;
}

int TestMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mw.internal.robotics.gazebotransport.TestMessage)
  int total_size = 0;

  // required double header = 1;
  if (has_header()) {
    total_size += 1 + 8;
  }
  switch (payload_case()) {
    // optional .mw.internal.robotics.gazebotransport.TestScalars test_scalar = 2;
    case kTestScalar: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.test_scalar_);
      break;
    }
    // optional .mw.internal.robotics.gazebotransport.TestArrays test_array = 3;
    case kTestArray: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.test_array_);
      break;
    }
    // optional .mw.internal.robotics.gazebotransport.TestNestedMessage test_nested_message = 4;
    case kTestNestedMessage: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.test_nested_message_);
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mw.internal.robotics.gazebotransport.TestMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TestMessage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TestMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mw.internal.robotics.gazebotransport.TestMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mw.internal.robotics.gazebotransport.TestMessage)
    MergeFrom(*source);
  }
}

void TestMessage::MergeFrom(const TestMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mw.internal.robotics.gazebotransport.TestMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  switch (from.payload_case()) {
    case kTestScalar: {
      mutable_test_scalar()->::mw::internal::robotics::gazebotransport::TestScalars::MergeFrom(from.test_scalar());
      break;
    }
    case kTestArray: {
      mutable_test_array()->::mw::internal::robotics::gazebotransport::TestArrays::MergeFrom(from.test_array());
      break;
    }
    case kTestNestedMessage: {
      mutable_test_nested_message()->::mw::internal::robotics::gazebotransport::TestNestedMessage::MergeFrom(from.test_nested_message());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      set_header(from.header());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TestMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mw.internal.robotics.gazebotransport.TestMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestMessage::CopyFrom(const TestMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mw.internal.robotics.gazebotransport.TestMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_test_scalar()) {
    if (!this->test_scalar().IsInitialized()) return false;
  }
  if (has_test_nested_message()) {
    if (!this->test_nested_message().IsInitialized()) return false;
  }
  return true;
}

void TestMessage::Swap(TestMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TestMessage::InternalSwap(TestMessage* other) {
  std::swap(header_, other->header_);
  std::swap(payload_, other->payload_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TestMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TestMessage_descriptor_;
  metadata.reflection = TestMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TestMessage

// required double header = 1;
bool TestMessage::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TestMessage::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void TestMessage::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void TestMessage::clear_header() {
  header_ = 0;
  clear_has_header();
}
 double TestMessage::header() const {
  // @@protoc_insertion_point(field_get:mw.internal.robotics.gazebotransport.TestMessage.header)
  return header_;
}
 void TestMessage::set_header(double value) {
  set_has_header();
  header_ = value;
  // @@protoc_insertion_point(field_set:mw.internal.robotics.gazebotransport.TestMessage.header)
}

// optional .mw.internal.robotics.gazebotransport.TestScalars test_scalar = 2;
bool TestMessage::has_test_scalar() const {
  return payload_case() == kTestScalar;
}
void TestMessage::set_has_test_scalar() {
  _oneof_case_[0] = kTestScalar;
}
void TestMessage::clear_test_scalar() {
  if (has_test_scalar()) {
    delete payload_.test_scalar_;
    clear_has_payload();
  }
}
 const ::mw::internal::robotics::gazebotransport::TestScalars& TestMessage::test_scalar() const {
  // @@protoc_insertion_point(field_get:mw.internal.robotics.gazebotransport.TestMessage.test_scalar)
  return has_test_scalar()
      ? *payload_.test_scalar_
      : ::mw::internal::robotics::gazebotransport::TestScalars::default_instance();
}
::mw::internal::robotics::gazebotransport::TestScalars* TestMessage::mutable_test_scalar() {
  if (!has_test_scalar()) {
    clear_payload();
    set_has_test_scalar();
    payload_.test_scalar_ = new ::mw::internal::robotics::gazebotransport::TestScalars;
  }
  // @@protoc_insertion_point(field_mutable:mw.internal.robotics.gazebotransport.TestMessage.test_scalar)
  return payload_.test_scalar_;
}
::mw::internal::robotics::gazebotransport::TestScalars* TestMessage::release_test_scalar() {
  // @@protoc_insertion_point(field_release:mw.internal.robotics.gazebotransport.TestMessage.test_scalar)
  if (has_test_scalar()) {
    clear_has_payload();
    ::mw::internal::robotics::gazebotransport::TestScalars* temp = payload_.test_scalar_;
    payload_.test_scalar_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void TestMessage::set_allocated_test_scalar(::mw::internal::robotics::gazebotransport::TestScalars* test_scalar) {
  clear_payload();
  if (test_scalar) {
    set_has_test_scalar();
    payload_.test_scalar_ = test_scalar;
  }
  // @@protoc_insertion_point(field_set_allocated:mw.internal.robotics.gazebotransport.TestMessage.test_scalar)
}

// optional .mw.internal.robotics.gazebotransport.TestArrays test_array = 3;
bool TestMessage::has_test_array() const {
  return payload_case() == kTestArray;
}
void TestMessage::set_has_test_array() {
  _oneof_case_[0] = kTestArray;
}
void TestMessage::clear_test_array() {
  if (has_test_array()) {
    delete payload_.test_array_;
    clear_has_payload();
  }
}
 const ::mw::internal::robotics::gazebotransport::TestArrays& TestMessage::test_array() const {
  // @@protoc_insertion_point(field_get:mw.internal.robotics.gazebotransport.TestMessage.test_array)
  return has_test_array()
      ? *payload_.test_array_
      : ::mw::internal::robotics::gazebotransport::TestArrays::default_instance();
}
::mw::internal::robotics::gazebotransport::TestArrays* TestMessage::mutable_test_array() {
  if (!has_test_array()) {
    clear_payload();
    set_has_test_array();
    payload_.test_array_ = new ::mw::internal::robotics::gazebotransport::TestArrays;
  }
  // @@protoc_insertion_point(field_mutable:mw.internal.robotics.gazebotransport.TestMessage.test_array)
  return payload_.test_array_;
}
::mw::internal::robotics::gazebotransport::TestArrays* TestMessage::release_test_array() {
  // @@protoc_insertion_point(field_release:mw.internal.robotics.gazebotransport.TestMessage.test_array)
  if (has_test_array()) {
    clear_has_payload();
    ::mw::internal::robotics::gazebotransport::TestArrays* temp = payload_.test_array_;
    payload_.test_array_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void TestMessage::set_allocated_test_array(::mw::internal::robotics::gazebotransport::TestArrays* test_array) {
  clear_payload();
  if (test_array) {
    set_has_test_array();
    payload_.test_array_ = test_array;
  }
  // @@protoc_insertion_point(field_set_allocated:mw.internal.robotics.gazebotransport.TestMessage.test_array)
}

// optional .mw.internal.robotics.gazebotransport.TestNestedMessage test_nested_message = 4;
bool TestMessage::has_test_nested_message() const {
  return payload_case() == kTestNestedMessage;
}
void TestMessage::set_has_test_nested_message() {
  _oneof_case_[0] = kTestNestedMessage;
}
void TestMessage::clear_test_nested_message() {
  if (has_test_nested_message()) {
    delete payload_.test_nested_message_;
    clear_has_payload();
  }
}
 const ::mw::internal::robotics::gazebotransport::TestNestedMessage& TestMessage::test_nested_message() const {
  // @@protoc_insertion_point(field_get:mw.internal.robotics.gazebotransport.TestMessage.test_nested_message)
  return has_test_nested_message()
      ? *payload_.test_nested_message_
      : ::mw::internal::robotics::gazebotransport::TestNestedMessage::default_instance();
}
::mw::internal::robotics::gazebotransport::TestNestedMessage* TestMessage::mutable_test_nested_message() {
  if (!has_test_nested_message()) {
    clear_payload();
    set_has_test_nested_message();
    payload_.test_nested_message_ = new ::mw::internal::robotics::gazebotransport::TestNestedMessage;
  }
  // @@protoc_insertion_point(field_mutable:mw.internal.robotics.gazebotransport.TestMessage.test_nested_message)
  return payload_.test_nested_message_;
}
::mw::internal::robotics::gazebotransport::TestNestedMessage* TestMessage::release_test_nested_message() {
  // @@protoc_insertion_point(field_release:mw.internal.robotics.gazebotransport.TestMessage.test_nested_message)
  if (has_test_nested_message()) {
    clear_has_payload();
    ::mw::internal::robotics::gazebotransport::TestNestedMessage* temp = payload_.test_nested_message_;
    payload_.test_nested_message_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void TestMessage::set_allocated_test_nested_message(::mw::internal::robotics::gazebotransport::TestNestedMessage* test_nested_message) {
  clear_payload();
  if (test_nested_message) {
    set_has_test_nested_message();
    payload_.test_nested_message_ = test_nested_message;
  }
  // @@protoc_insertion_point(field_set_allocated:mw.internal.robotics.gazebotransport.TestMessage.test_nested_message)
}

bool TestMessage::has_payload() const {
  return payload_case() != PAYLOAD_NOT_SET;
}
void TestMessage::clear_has_payload() {
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}
TestMessage::PayloadCase TestMessage::payload_case() const {
  return TestMessage::PayloadCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TestPose::kXFieldNumber;
const int TestPose::kYFieldNumber;
const int TestPose::kZFieldNumber;
const int TestPose::kWFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TestPose::TestPose()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mw.internal.robotics.gazebotransport.TestPose)
}

void TestPose::InitAsDefaultInstance() {
}

TestPose::TestPose(const TestPose& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mw.internal.robotics.gazebotransport.TestPose)
}

void TestPose::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  w_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TestPose::~TestPose() {
  // @@protoc_insertion_point(destructor:mw.internal.robotics.gazebotransport.TestPose)
  SharedDtor();
}

void TestPose::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TestPose::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TestPose::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TestPose_descriptor_;
}

const TestPose& TestPose::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mw_2einternal_2erobotics_2egazebotransport_2eTestMsgs_2eproto();
  return *default_instance_;
}

TestPose* TestPose::default_instance_ = NULL;

TestPose* TestPose::New(::google::protobuf::Arena* arena) const {
  TestPose* n = new TestPose;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TestPose::Clear() {
// @@protoc_insertion_point(message_clear_start:mw.internal.robotics.gazebotransport.TestPose)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TestPose, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TestPose*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_, w_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TestPose::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mw.internal.robotics.gazebotransport.TestPose)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double x = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_y;
        break;
      }

      // required double y = 2;
      case 2: {
        if (tag == 17) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_z;
        break;
      }

      // required double z = 3;
      case 3: {
        if (tag == 25) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_w;
        break;
      }

      // required double w = 4;
      case 4: {
        if (tag == 33) {
         parse_w:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &w_)));
          set_has_w();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mw.internal.robotics.gazebotransport.TestPose)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mw.internal.robotics.gazebotransport.TestPose)
  return false;
#undef DO_
}

void TestPose::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mw.internal.robotics.gazebotransport.TestPose)
  // required double x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // required double y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  // required double z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->z(), output);
  }

  // required double w = 4;
  if (has_w()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->w(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mw.internal.robotics.gazebotransport.TestPose)
}

::google::protobuf::uint8* TestPose::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mw.internal.robotics.gazebotransport.TestPose)
  // required double x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // required double y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  // required double z = 3;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->z(), target);
  }

  // required double w = 4;
  if (has_w()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->w(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mw.internal.robotics.gazebotransport.TestPose)
  return target;
}

int TestPose::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:mw.internal.robotics.gazebotransport.TestPose)
  int total_size = 0;

  if (has_x()) {
    // required double x = 1;
    total_size += 1 + 8;
  }

  if (has_y()) {
    // required double y = 2;
    total_size += 1 + 8;
  }

  if (has_z()) {
    // required double z = 3;
    total_size += 1 + 8;
  }

  if (has_w()) {
    // required double w = 4;
    total_size += 1 + 8;
  }

  return total_size;
}
int TestPose::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:mw.internal.robotics.gazebotransport.TestPose)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required double x = 1;
    total_size += 1 + 8;

    // required double y = 2;
    total_size += 1 + 8;

    // required double z = 3;
    total_size += 1 + 8;

    // required double w = 4;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestPose::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mw.internal.robotics.gazebotransport.TestPose)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TestPose* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TestPose>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mw.internal.robotics.gazebotransport.TestPose)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mw.internal.robotics.gazebotransport.TestPose)
    MergeFrom(*source);
  }
}

void TestPose::MergeFrom(const TestPose& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mw.internal.robotics.gazebotransport.TestPose)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
    if (from.has_w()) {
      set_w(from.w());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TestPose::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mw.internal.robotics.gazebotransport.TestPose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestPose::CopyFrom(const TestPose& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mw.internal.robotics.gazebotransport.TestPose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestPose::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void TestPose::Swap(TestPose* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TestPose::InternalSwap(TestPose* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(z_, other->z_);
  std::swap(w_, other->w_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TestPose::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TestPose_descriptor_;
  metadata.reflection = TestPose_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TestPose

// required double x = 1;
bool TestPose::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TestPose::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
void TestPose::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
void TestPose::clear_x() {
  x_ = 0;
  clear_has_x();
}
 double TestPose::x() const {
  // @@protoc_insertion_point(field_get:mw.internal.robotics.gazebotransport.TestPose.x)
  return x_;
}
 void TestPose::set_x(double value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:mw.internal.robotics.gazebotransport.TestPose.x)
}

// required double y = 2;
bool TestPose::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TestPose::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
void TestPose::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
void TestPose::clear_y() {
  y_ = 0;
  clear_has_y();
}
 double TestPose::y() const {
  // @@protoc_insertion_point(field_get:mw.internal.robotics.gazebotransport.TestPose.y)
  return y_;
}
 void TestPose::set_y(double value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:mw.internal.robotics.gazebotransport.TestPose.y)
}

// required double z = 3;
bool TestPose::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TestPose::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
void TestPose::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
void TestPose::clear_z() {
  z_ = 0;
  clear_has_z();
}
 double TestPose::z() const {
  // @@protoc_insertion_point(field_get:mw.internal.robotics.gazebotransport.TestPose.z)
  return z_;
}
 void TestPose::set_z(double value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:mw.internal.robotics.gazebotransport.TestPose.z)
}

// required double w = 4;
bool TestPose::has_w() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TestPose::set_has_w() {
  _has_bits_[0] |= 0x00000008u;
}
void TestPose::clear_has_w() {
  _has_bits_[0] &= ~0x00000008u;
}
void TestPose::clear_w() {
  w_ = 0;
  clear_has_w();
}
 double TestPose::w() const {
  // @@protoc_insertion_point(field_get:mw.internal.robotics.gazebotransport.TestPose.w)
  return w_;
}
 void TestPose::set_w(double value) {
  set_has_w();
  w_ = value;
  // @@protoc_insertion_point(field_set:mw.internal.robotics.gazebotransport.TestPose.w)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace gazebotransport
}  // namespace robotics
}  // namespace internal
}  // namespace mw

// @@protoc_insertion_point(global_scope)
